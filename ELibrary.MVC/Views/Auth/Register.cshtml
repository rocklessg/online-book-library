@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
@{
    ViewData["Title"] = "Register";
}
@model ELibrary.MVC.Model.DTO.RequestDTO.RegisterDTO

<body class="bg-gradient-primary bg">

    <div class="container">

        <!-- Outer Row -->
        <div class="row justify-content-center">

            <div class="col-sm-10 col-lg-6 col-md-6">

                <div class="card o-hidden border-0 shadow-lg my-5">
                    <div class="card-body p-0">
                        <!-- Nested Row within Card Body -->

                        <div class="row">
                            @using (Html.BeginForm("Register", "Auth", FormMethod.Post, new { novalidate = "true", @class = "needs-validation" }))
                            {

                                <div class="bg-dark p-5">
                                    <h1 class="h3 mb-1 fw-normal text-center"><i class='bx bx-book-reader' style="font-size:50px"></i></h1>
                                    <h1 class="h3 mb-3 fw-normal text-center">Bookly</h1>
                                    <p class="text-center">Please Signup</p>
                                    <div class="form-group mb-2">
                                        @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control has-validation", @placeholder = "FirstName", @required = "required" })
                                        @Html.ValidationMessageFor(m => m.FirstName, "", new { @class = "badge bg-danger" })
                                        @if (ViewBag.error != null)
                                        {
                                            <span class="badge bg-danger">@ViewBag.error</span>
                                        }
                                    </div>
                                    <div class="form-group mb-2">
                                        @Html.TextBoxFor(m => m.LastName, new { @class = "form-control has-validation", @placeholder = "LastName", @required = "required" })
                                        @Html.ValidationMessageFor(m => m.LastName, "", new { @class = "badge bg-danger" })
                                        @if (ViewBag.error != null)
                                        {
                                            <span class="badge bg-danger">@ViewBag.error</span>
                                        }
                                    </div>
                                    <div class="form-group mb-2">
                                        @Html.DropDownListFor(m => m.Gender, new SelectList(Enum.GetValues(typeof(ELibrary.MVC.Model.DTO.Gender))), "Select Gender", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.Gender, "", new { @class = "badge bg-danger" })
                                        @if (ViewBag.error != null)
                                        {
                                            <span class="invalid-feedback">@ViewBag.error</span>
                                        }
                                    </div>
                                    <div class="form-group mb-2">
                                        @Html.TextBoxFor(x => x.Email, new { @class = "form-control has-validation", @placeholder = "Email", @required = "required" })
                                        @Html.ValidationMessageFor(m => m.Email, "", new { @class = "badge bg-danger" })
                                        @if (ViewBag.error != null)
                                        {
                                            <span class="badge bg-danger">@ViewBag.error</span>
                                        }
                                    </div>
                                    <div class="form-group mb-2">
                                        @Html.PasswordFor(x => x.Password, new { @class = "form-control has-validation", @placeholder = "Password", @required = "required" })
                                        @Html.ValidationMessageFor(m => m.Password, "", new { @class = "badge bg-danger" })
                                        @if (ViewBag.error != null)
                                        {
                                            <span class="badge bg-danger">@ViewBag.error</span>
                                        }
                                    </div>
                                    <div class="form-group mb-2">
                                        @Html.PasswordFor(x => x.ConfirmPassword, new { @class = "form-control has-validation", @placeholder = "Confirm Password", @required = "required" })
                                        @Html.ValidationMessageFor(m => m.ConfirmPassword, string.Empty, new { @class = "badge bg-danger" })
                                        @if (ViewBag.error != null)
                                        {
                                            <span class="badge bg-danger">@ViewBag.error</span>
                                        }
                                    </div>

                                    <div class="form-group">
                                        <input type="submit" name="submit" class="btn btn-primary w-100" value="Register" />
                                    </div>
                                    <div class="d-flex justify-content-between ">
                                        <p>Already have an account?</p>
                                        <p><a asp-area="" asp-controller="Auth" asp-action="Login">Login <i class='bx bx-right-arrow-alt'></i></a></p>
                                    </div>
                                    <div class="d-flex justify-content-start">
                                        <p><a asp-area="" asp-controller="Home" asp-action=""><i class='bx bx-left-arrow-alt'></i> Home</a></p>
                                    </div>
                                </div>
                                @if (TempData["error"] != null)
                                {
                                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                        @Html.TempData["error"].ToString();
                                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                    </div>
                                }

                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>